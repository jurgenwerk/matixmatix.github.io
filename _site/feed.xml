<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-12-04T22:01:30+01:00</updated><id>/</id><title>codeandtechno</title><subtitle>Matic Jurglič is a computer person who specializes in avant-garde internet applications.</subtitle><author><name>matic jurglic</name></author><entry><title>Dynamic CSS in Ember templates</title><link href="/posts/dynamic-css-in-ember-templates/" rel="alternate" type="text/html" title="Dynamic CSS in Ember templates" /><published>2016-11-12T00:00:00+01:00</published><updated>2016-11-12T00:00:00+01:00</updated><id>/posts/dynamic-css-in-ember-templates</id><content type="html" xml:base="/posts/dynamic-css-in-ember-templates/">&lt;p&gt;Recently I was challenged with a task to dynamically colorize checkboxes when they are selected. The colors are generated on-the-fly when the select action is triggered:&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/qeUvEToKvHGBa&quot; width=&quot;400&quot; height=&quot;250&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;small&gt;Finished functionality. It’s a selector for chart series.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Since we generate colors dynamically and thus can’t make predefined CSS classes that determine the checkbox’s color, I thought it should be enough to simply inline the color style, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;{{#&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;chartSeries&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html-safe&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;color:&#39;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;checked=…&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seriesId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
      &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/label&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;{{/&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;small&gt;Random color is set to the the &lt;code class=&quot;highlighter-rouge&quot;&gt;series.color&lt;/code&gt; property on checkbox change event.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Due to the way these custom checkboxes are implemented, I learned this is not going to work. The place to define checkbox’s background color is actually in the label’s &lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt; pseudo selector:&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/dynamic-css-post/1.jpg&quot;&gt;&lt;img src=&quot;/images/dynamic-css-post/1.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;You can&#39;t implement pseudo-element declarations using inline CSS.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;lesson-1-css-is-not-designed-to-accept-pseudo-element-styles-in-the-style-attribute&quot;&gt;Lesson 1: CSS is not designed to accept pseudo-element styles in the style attribute.&lt;/h2&gt;

&lt;p&gt;What can we do?&lt;/p&gt;

&lt;p&gt;The only solution that came to my mind is to generate CSS classes dynamically. I naively wrote this piece of code in the template, and for some reason, I didn’t expect it to work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{#&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;chartSeries&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
    input[type=&quot;checkbox&quot;]#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seriesId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.styled:checked + label:before {
      background: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
      border-color: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
    }
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;{{/&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But it did. I was amazed by how Ember’s templating engine digests this without problems, and dynamically adds the necessary CSS declarations to the &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tag when the &lt;code class=&quot;highlighter-rouge&quot;&gt;chartSeries&lt;/code&gt; array changes:&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/dynamic-css-post/2.jpg&quot;&gt;&lt;img src=&quot;/images/dynamic-css-post/2.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;The templating engine inserts some whitespace, but we can live with that.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;lesson-2-when-you-need-a-dirty-workaround-embers-templating-engine-can-reactively-spit-out-practically-any-markup-a-browser-can-understand&quot;&gt;Lesson 2: When you need a dirty workaround, Ember’s templating engine can reactively spit out practically any markup a browser can understand.&lt;/h2&gt;

&lt;p&gt;Just be careful not to ruin your site’s performance.&lt;/p&gt;

&lt;p&gt;In our case, every time the &lt;code class=&quot;highlighter-rouge&quot;&gt;chartSeries&lt;/code&gt; array changes, the browser needs to recalculate style, which could lead to page clunkiness if we had a lot of elements and a lot of updates in a short amount of time.&lt;/p&gt;</content><category term="posts" /><summary>When you need a dirty workaround, Ember&#39;s templating engine can reactively spit out practically any markup a browser can understand.</summary></entry><entry><title>Making a concrete fibonacci clock</title><link href="/posts/concrete-fibonacci-clock/" rel="alternate" type="text/html" title="Making a concrete fibonacci clock" /><published>2016-11-06T00:00:00+01:00</published><updated>2016-11-06T00:00:00+01:00</updated><id>/posts/concrete-fibonacci-clock</id><content type="html" xml:base="/posts/concrete-fibonacci-clock/">&lt;p&gt;The idea of the Fibonacci clock is a brainchild of &lt;a href=&quot;http://basbrun.com/&quot;&gt;Philippe Chrétien&lt;/a&gt;, who calls his creation “a clock for nerds with style”. It’s certainly not a very practical clock, but the fusion of the curious numerical sequence with a lighting installation aesthetic is just too appealing to look away.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_8108.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_8108.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_8110.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_8110.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;My concrete fibonacci clock in action. It&#39;s supposed to tell time...&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To tell the time on this timepiece, you need to use some brains. There’s an equation (check out &lt;a href=&quot;https://www.kickstarter.com/projects/basbrun/fibonacci-clock-an-open-source-clock-for-nerds-wit&quot;&gt;this link&lt;/a&gt; for more details) where you use numbers related to which chamber is lit with which color. Here’s an example:&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/fibonacci/instructions.png&quot;&gt;&lt;img src=&quot;/images/fibonacci/instructions.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;The screen of the clock is made up of five squares whose side lengths match the first five Fibonacci numbers: 1, 1, 2, 3 and 5.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Phillipe is offering finished products in pretty wooden casings, but I needed to add one extra dimension: &lt;strong&gt;brutality&lt;/strong&gt;. Let’s make this thing out of concrete! I purchased the electronics part (LEDs and the controller) only, and used them for my interpretation of the clock.&lt;/p&gt;

&lt;h2 id=&quot;make-a-mold&quot;&gt;Make a mold&lt;/h2&gt;

&lt;p&gt;For molding of my concrete projects I often use Styrodur (a brand of extruded polystyrene) which I find to be the perfect tradeoff between the ease of handling and rigidness for holding shape (for smaller objects at least). The pieces are glued together.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
     &lt;a href=&quot;/images/fibonacci/IMG_6769.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_6769.jpg&quot; /&gt;&lt;/a&gt;
     &lt;a href=&quot;/images/fibonacci/IMG_6802.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_6802.jpg&quot; /&gt;&lt;/a&gt;
     &lt;figcaption&gt;The idea is to make a box where the concrete is simply poured in, and when the concrete &quot;dries up&quot;, the mold is taken apart, which leaves us with a shaped brick.&lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;h2 id=&quot;pour-the-concrete-into-the-mold&quot;&gt;Pour the concrete into the mold&lt;/h2&gt;
&lt;p&gt;I use a mixture of standard cement, sand, water. Adding reinforcement is crucial, otherwise the concrete brick falls apart and cracks. In this case I used glass fiber, but I’m regretting it, because the fibers make the the surface of the concrete look bad (tiny stripes and scars). I should have just used good old steel reinforcement.&lt;/p&gt;

&lt;p&gt;This amount of concrete is surprisingly heavy (weight of a small child), and somehow I didn’t fully account for that during the process. As I was pouring the concrete in the mold, the outer walls started to bend. Yikes! I needed a quick way to ensure the walls stay straight using whatever I could find in that moment. Behold the various things holding it together.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_6819.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_6819.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_6821 2.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_6821 2.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;The insides are coated with vegetable oil for easier dismantling.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;take-the-brick-out-of-the-mold&quot;&gt;Take the brick out of the mold&lt;/h2&gt;

&lt;p&gt;There’s nothing sweeter than the smell of freshly cured concrete in the morning. I tore the skeleton apart, and found this beauty underneath. To get the wiring through, holes were drilled in the inner walls.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_6827.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_6827.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_7784.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_7784.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;You can see glass fibre on the edges. It’s effective for strength, but looks ugly on the surface.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Did you know it can take up to 20 years for the concrete to fully harden and settle?&lt;/p&gt;

&lt;h2 id=&quot;attach-acrylic-glass&quot;&gt;Attach acrylic glass&lt;/h2&gt;

&lt;p&gt;With a jig saw, I cut the covers out of an acrylic glass sheet, drilled the holes for the bolts and attached the nuts:&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_7786.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_7786.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_7810.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_7810.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Test fit.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;sand-and-color&quot;&gt;Sand and color&lt;/h2&gt;

&lt;p&gt;Time to sand this fucker down and make it smooth. The amount of dust generated while sanding concrete is colossal and disgusting. The brick was then coated with a protective waterproofer.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_7937.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_7937.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_8062.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_8062.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;I didn&#39;t like the look of the silver bolts, so I decided to paint them black.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;finish-up&quot;&gt;Finish up&lt;/h2&gt;

&lt;p&gt;To project as much light as possible onto the acrylic sheets from the LEDs behind, I made an internal wooden enclosure and covered it with aluminum reflective foil. Let’s also add some legs, so the clock won’t leave scrathes all over the place.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_8060.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_8060.jpg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_8064.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_8064.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Almost done.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/fibonacci/IMG_8095.jpg&quot;&gt;&lt;img src=&quot;/images/fibonacci/IMG_8095.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Done.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The clock also comes with a secret mode that continuously flashes through a vast spectre of colors. A real feast for the eyes.&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/DkghEwh3sVz6E&quot; width=&quot;480&quot; height=&quot;270&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><category term="posts" /><summary>Not a very practical clock, but the fusion of the curious numerical sequence with a lighting installation aesthetic is just too appealing to look away.</summary></entry><entry><title>Recurring subscription payments: use external service or make your own?</title><link href="/posts/subscription-payments-use-external-service-or-make-your-own/" rel="alternate" type="text/html" title="Recurring subscription payments: use external service or make your own?" /><published>2016-09-19T00:00:00+02:00</published><updated>2016-09-19T00:00:00+02:00</updated><id>/posts/subscription-payments-use-external-service-or-make-your-own</id><content type="html" xml:base="/posts/subscription-payments-use-external-service-or-make-your-own/">&lt;p&gt;Billing is far more complex than people tend to believe, and much more so with subscriptions.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Remind me to never make a subscription service again.&lt;/p&gt;&amp;mdash; Jeffrey Biles (@JeffreyBiles) &lt;a href=&quot;https://twitter.com/JeffreyBiles/status/775371558768390144&quot;&gt;September 12, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;center&gt;&lt;small&gt;I feel your pain, Jeffrey. It&#39;s hard to get it right.&lt;/small&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Subscriptions are a common business model in paid online products, especially in SaaS world. That means the customers are charged in a recurring fashion; most commonly monthly or yearly.&lt;/p&gt;

&lt;p&gt;After you convinced your customer to enter their payment vehicle (credit card, PayPal, etc), there are two ways you can trigger acquiring currency when their payment is due:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use an external billing service (&lt;a href=&quot;https://www.braintreegateway.com/&quot;&gt;Braintree&lt;/a&gt;, &lt;a href=&quot;https://recurly.com/product/&quot;&gt;Recurly&lt;/a&gt;, &lt;a href=&quot;https://stripe.com&quot;&gt;Stripe&lt;/a&gt;, &lt;a href=&quot;https://cheddargetter.com/&quot;&gt;Chedargetter&lt;/a&gt;,…) and let it do &lt;strong&gt;all&lt;/strong&gt; the billing work. Let it charge your customers on a recurring basis and send you event notifications, which you use to update your system - prolong or expire customers’ subscription. Simple, fast, reliable, but severely limited in customization as your business needs grow.&lt;/li&gt;
  &lt;li&gt;Also use one of the billing services*, but only manually - implement your own payment scheduler (usually with a cron job or a run loop) and bill the customers using your own server. Periodically use the payment service’s API to bill customers, and handle all the results yourself. It’s more complex and bug prone, takes more time to implement, but you’re in complete control and know exactly how your billing system works, especially when something breaks.
&lt;br /&gt;&lt;br /&gt;&lt;span&gt;*&lt;/span&gt; &lt;small&gt;assuming you’re offloading PCI responsibility to a payment processor by only storing customer tokens on your server instead of raw payment method data. &lt;/small&gt;
 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, what does this recurring work actually include? The most basic flow is this: every month,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;determine&lt;/strong&gt; payment amount depending on customer’s subscription plan,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;charge&lt;/strong&gt; the amount using their payment method,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;update&lt;/strong&gt; their subscription in your application’s database,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;send&lt;/strong&gt; an invoice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;you-need-to-decide-what-kind-of-billing-mechanics-your-business-needs&quot;&gt;You need to decide what kind of billing mechanics your business needs.&lt;/h2&gt;

&lt;p&gt;&lt;span style=&quot;margin-top: 20px; display: inline-block;&quot;&gt;Let’s compare both ways a little bit more in depth.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Using option 1, you populate the external service with your subscription plans, add-ons, coupons and perhaps configure trial periods. When customers subscribe to your product, your application registers them to the billing service. It takes care of deducting your customers’ money every month/year and sending it to your wallet. For every payment activity (successful charge, declined card, etc), they send an event notification, usually as HTTP requests to your API - also known as “reverse API”. You use these notifications to extend or halt your customers’ subscriptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main benefit here is that you spend very little time developing a billing system.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you are just starting out, or when you’re certain your billing dynamics aren’t going to be very diverse, implementing your own billing system is most probably a waste of time. This way you usually also get some basic billing analytics with it, which is really useful for monitoring customer and revenue churn rates.&lt;/p&gt;

&lt;h2 id=&quot;as-your-business-grows-things-can-quickly-get-complicated&quot;&gt;As your business grows, things can quickly get complicated.&lt;/h2&gt;

&lt;p&gt;&lt;span style=&quot;margin-top: 20px; display: inline-block;&quot;&gt;Consider diverse subscription plans, coupons and add-ons with variable durations and prices depending on various conditions, multi-currency, multi-tenancy and dunning.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Let’s list some examples.&lt;/p&gt;

&lt;p&gt;What if…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a customer decides to upgrade from a monthly to a yearly subscription in the middle of the month, and you have some custom rules for a pro-rate refund?&lt;/li&gt;
  &lt;li&gt;a coupon is valid only for an upgrade to a larger subscription?&lt;/li&gt;
  &lt;li&gt;there is a second trial period for some customers?&lt;/li&gt;
  &lt;li&gt;an add-on is cheaper on a larger subscription plan?&lt;/li&gt;
  &lt;li&gt;there is a special discount for people paying with a debit visa card?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the pattern?&lt;/p&gt;

&lt;p&gt;In cases like this, you can’t escape having a custom tailored business logic for determining the amount to charge. As your pricing plans become more convoluted with discounting, optional add-ons and conditionals it becomes hard not just to bill, but also to keep track of activities, ordering, and reporting.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;http://i.imgur.com/cLU8h3D.png&quot; alt=&quot;RankTrackr Billing&quot; title=&quot;RankTrackr billing&quot; style=&quot;width: 520px; margin-top: 20px;&quot; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;small&gt;At &lt;a href=&quot;http://ranktrackr.com&quot;&gt;RankTrackr&lt;/a&gt; we built a custom billing service. It runs every day at 10AM and shows the results in Slack. &lt;/small&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
&lt;span style=&quot;margin-top: 15px; display: block;&quot;&gt;Subscription payments are one of the most delicate parts of your online business, so do your homework, because migrating to a different subscription payment implementation is distressing and expensive.&lt;/span&gt;&lt;/p&gt;</content><category term="posts" /><summary>Billing is far more complex than people tend to believe, and much more so with subscriptions.</summary></entry><entry><title>Tips for selling your side project</title><link href="/posts/tips-for-selling-your-side-project/" rel="alternate" type="text/html" title="Tips for selling your side project" /><published>2016-08-08T00:00:00+02:00</published><updated>2016-08-08T00:00:00+02:00</updated><id>/posts/tips-for-selling-your-side-project</id><content type="html" xml:base="/posts/tips-for-selling-your-side-project/">&lt;p&gt;Side projects are expressions of creativity, they are tools for fixing frustrations, having fun and brushing up on skills. This is true for all areas of life, not just in software projects, which this post is about.&lt;/p&gt;

&lt;p&gt;Always be doing side projects if you want to stay relevant, especially to yourself.&lt;/p&gt;

&lt;!-- Sometimes, side projects actually grow into something that other people could use too. You have something to show. That’s incredible! Perhaps you published it and have a few people using it. You managed to ship the damn thing, but then… It’s just sitting there. You lose interest. You think your project has potential, but you leave it standing, because you find yourself caught up in another project and can find a better use of your time.   --&gt;

&lt;p&gt;This is a story of how I managed to sell my simple project to a guy from the internet and earned an amount of cash equivalent to my yearly supply of beer, and trust me, I REALLY like beer. All I did was put together a trivial web app to scratch my own itch, and it keeps scratching it, while I drink my free beer.&lt;/p&gt;

&lt;p&gt;Here’s the project: &lt;a href=&quot;http://sitestalker.net&quot;&gt;Sitestalker&lt;/a&gt;. I made it because I needed to buy a car and grew sick of checking used car ads every day. At first it was just a simple script. I built an interface around it. A few hours of work.&lt;/p&gt;

&lt;p&gt;Following these rules, I got somebody to buy the project.&lt;/p&gt;

&lt;h2 id=&quot;make-it-look-good&quot;&gt;1. Make it look good&lt;/h2&gt;

&lt;p&gt;Whatever your side project does, make a nice presentation page with brief explanations. I know, copywriting is hard. But also an invaluable skill for life, so why not practice it whenever you can? If you can’t design, get a cheap template, or just copy something you like. Put in some user testimonials if you can get them.&lt;/p&gt;

&lt;p&gt;Nobody’s buying websites with default Bootstrap theme.&lt;/p&gt;

&lt;h2 id=&quot;display-value&quot;&gt;2. Display value&lt;/h2&gt;

&lt;p&gt;Stick in some Google Analytics. Do basic SEO, optimize for your keywords. Check how Google sees you. Offer user sign up if you can (if that’s the nature of your product), otherwise try to collect emails. Always collect emails. Try to push the project in your online social circle. Don’t be afraid to show what you have. Screw the haters, seriously. Make some traffic. This is essentially what you’re selling, and what your possible buyers are looking for.&lt;/p&gt;

&lt;p&gt;People who look to buy projects like nice traffic charts. Nobody’s buying flat line projects.&lt;/p&gt;

&lt;h2 id=&quot;publish-it-on-the-side-project-market&quot;&gt;3. Publish it on the side project market&lt;/h2&gt;

&lt;p&gt;The most popular markets for selling side projects are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flippa.com&quot;&gt;Flippa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sideprojectors.com&quot;&gt;SideProjectors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://empireflippers.com/&quot;&gt;Empire Flippers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Often there are also discussions on Reddit and Hacker News where people discuss selling their projects: &lt;a href=&quot;https://news.ycombinator.com/item?id=7656154&quot;&gt;example 1&lt;/a&gt;, &lt;a href=&quot;https://news.ycombinator.com/item?id=7656154&quot;&gt;example 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Publish your thing in these websites. Write a solid sales pitch. Write your ideas for future development. If your side project doesn’t have a lot of traffic, try giving some ideas on how to improve that. The same goes for monetization. How can a buyer adopt your product and make profit? Give them ideas. Try to sell your support if they need it.&lt;/p&gt;

&lt;h2 id=&quot;package-and-document-it&quot;&gt;4. Package and document it&lt;/h2&gt;

&lt;p&gt;You have to come up with a way to minimize the time and cost of transferring the project - the application, the code and the knowledge on how to operate and maintain the project.&lt;/p&gt;

&lt;p&gt;Here’s some ideas:&lt;/p&gt;

&lt;p&gt;Transfer the code by pushing it to a private code repository (free at &lt;a href=&quot;https://bitbucket.org&quot;&gt;Bitbucket&lt;/a&gt; or &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab&lt;/a&gt;), then transfer the ownership to your buyer. They’ll see the code, and if the code is shit, then you may be in trouble. So write cool code.&lt;/p&gt;

&lt;p&gt;Transfer the running application by deploying it to &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;, then make a snapshot and transfer it to your buyer’s DigitalOcean account. Easy.&lt;/p&gt;

&lt;p&gt;Write a cheat sheet on how to run the project. Describe the procedure to deploy, restart, and how to troubleshoot common problems. List all the credentials needed. List all external dependencies.&lt;/p&gt;

&lt;p&gt;Transfer the domain, and that’s it, you’re done.&lt;/p&gt;

&lt;p&gt;If your buyer is concerned about non-compete legal stuff, you can both sign an Assignment and Transfer Agreement via &lt;a href=&quot;https://www.docracy.com/&quot;&gt;Docracy&lt;/a&gt;. It’s a valid document, and it only takes a few minutes.&lt;/p&gt;

&lt;h2 id=&quot;be-patient&quot;&gt;5. Be patient&lt;/h2&gt;

&lt;p&gt;Wait it out, and take it easy. Don’t lower your price every week.&lt;/p&gt;

&lt;h2 id=&quot;my-lesson&quot;&gt;My lesson&lt;/h2&gt;

&lt;p&gt;There’s a market for even the simplest of things, if you know how to present their value well. I’m giving myself a nice pat on the back for rediscovering the basics of commerce, but if I managed to sell my Sitestalker, and if my friend sold a bot that tweets your crush on Valentines, then what’s stopping you from exchanging your thing that’s just idling there for free beer?&lt;/p&gt;</content><category term="posts" /><summary>All I did was put together a trivial web app to scratch my own itch, and it keeps scratching it, while I drink my free beer.</summary></entry><entry><title>How to reset Ember applications</title><link href="/posts/how-to-reset-ember-applications/" rel="alternate" type="text/html" title="How to reset Ember applications" /><published>2016-06-12T00:00:00+02:00</published><updated>2016-06-12T00:00:00+02:00</updated><id>/posts/how-to-reset-ember-applications</id><content type="html" xml:base="/posts/how-to-reset-ember-applications/">&lt;p&gt;Usually when the user logs out of your Ember application, we want to clear the state, wipe out every trace of user activity, and unload the store in order to reach a blank state and make the application ready to start a fresh session.&lt;/p&gt;

&lt;p&gt;Most of the time we are (totally rightfully) tempted to find the one and only &lt;strong&gt;Ember way&lt;/strong&gt; for each possible action in our application. So, you go surfin’ in the Ember’s &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html&quot;&gt;API docs&lt;/a&gt; and find the &lt;code class=&quot;highlighter-rouge&quot;&gt;Application#reset&lt;/code&gt; method. It says it re-creates the application’s container. Sounds good?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No. Do not use it!&lt;/strong&gt; (except perhaps in tests).&lt;/p&gt;

&lt;p&gt;Why is that so?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; method &lt;em&gt;can not&lt;/em&gt; ensure all possible states will be wiped out. Due to the nature of JavaScript, there’s a plethora of ways us programmers can pile up various state and values all over the place in a way where Ember’s container mechanism is not aware of it.&lt;/p&gt;

&lt;p&gt;Here’s one example. Ever found guilty of doing this?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// don&#39;t do this&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;saveName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This piece of code puts the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; in the class prototype and &lt;code class=&quot;highlighter-rouge&quot;&gt;Application#reset&lt;/code&gt; will not be able to reset it. BTW, for obvious reasons, &lt;strong&gt;never&lt;/strong&gt; declare default object values in a way depicted in the upper example, but rather set them in the object’s &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;What should we use then?&lt;/p&gt;

&lt;h3 id=&quot;the-good-ol-page-refresh&quot;&gt;The good ol’ page refresh.&lt;/h3&gt;

&lt;p&gt;To be 100% sure all memory is wiped away and the grounds are freshly prepared, just reload the page (usually in the session invalidation step). &lt;code class=&quot;highlighter-rouge&quot;&gt;window.location = &#39;/&#39;&lt;/code&gt; or something similar should do just fine. There’s no shame in doing it. Things are cached. Don’t worry.&lt;/p&gt;

&lt;p&gt;P.S. Are you fresh in Ember land and want to learn more tricks like these? Check out &lt;a href=&quot;http://emberjs-book.com/&quot;&gt;Front-end revolution with Ember.js&lt;/a&gt;!&lt;/p&gt;</content><category term="posts" /><summary>Usually when the user logs out of your Ember application, we want to clear the state, wipe out every trace of user activity, and unload the store in order to reach a blank state and make the application ready to start a fresh session.</summary></entry><entry><title>Import an external library as an ES6 module in your Ember app</title><link href="/posts/import-an-external-library-as-an-ES6-module-in-ember-js/" rel="alternate" type="text/html" title="Import an external library as an ES6 module in your Ember app" /><published>2016-05-15T00:00:00+02:00</published><updated>2016-05-15T00:00:00+02:00</updated><id>/posts/import-an-external-library-as-an-ES6-module-in-ember-js</id><content type="html" xml:base="/posts/import-an-external-library-as-an-ES6-module-in-ember-js/">&lt;p&gt;Consuming 3rd party libraries from the browser’s global &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; scope is nowadays considered as outrageous, egregious, preposterous.&lt;/p&gt;

&lt;p&gt;Why is that so? It goes against all good practices of code reuse. Even your JavaScript linter starts complaining. That’s when we’re 98% positive we’re doing something wrong.&lt;/p&gt;

&lt;p&gt;The 1001th rule of building ambitious web applications states as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“As your application grows, you’re gonna need to bring in that obscure JavaScript library from Bower that nobody cared to module-ize or addon-ize before”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure, we can put the external library’s code into our vendor folder (or read it from &lt;code class=&quot;highlighter-rouge&quot;&gt;bower_components&lt;/code&gt;) and include it in our Ember build like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ember-cli-build.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmberApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ember-cli/lib/broccoli/ember-app&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(...),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;vendor/chartist/chartist.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or bower_components&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…but then we’re still left with the stinkin’ &lt;code class=&quot;highlighter-rouge&quot;&gt;Chartist&lt;/code&gt; global (in this case). BTW, &lt;a href=&quot;https://gionkunz.github.io/chartist-js/&quot;&gt;Chartist.js&lt;/a&gt; is a library for drawing cute charts.&lt;/p&gt;

&lt;p&gt;Let’s instead make a new Ember add-on, called &lt;code class=&quot;highlighter-rouge&quot;&gt;ember-chartist-shim&lt;/code&gt;, that will enable any Ember app to consume the Chartist library as an ES6 module.&lt;/p&gt;

&lt;p&gt;What’s a shim? It’s usually a wrapper that brings a new API to an older environment. In this case, the newer stuff is an ES6 module.&lt;/p&gt;

&lt;p&gt;What that means is that we’ll be able to install the shim with &lt;code class=&quot;highlighter-rouge&quot;&gt;ember addon ember-chartist-shim&lt;/code&gt; terminal command and easily import the library wherever in our application (and not be forced to use globals), like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartist&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s get to work.&lt;/p&gt;

&lt;p&gt;Create your add-on and step into it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember addon ember-chartist-shim
cd ember-chartist-shim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a blueprint that fetches the library from Bower after the add-on gets installed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember g blueprint ember-chartist-shim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// blueprints/ember-chartist-shim/index.js&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*jshint node:true*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;normalizeEntityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// allows to run ember -g ember-chartist-shim and not blow up&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// because ember cli normally expects the format&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ember generate &amp;lt;entityName&amp;gt; &amp;lt;blueprint&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;afterInstall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addBowerPackageToProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;chartist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tell the add-on what to include in your target Ember application:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.js&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* jshint node: true */&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;chartist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bowerDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/chartist/dist/chartist.css&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bowerDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/chartist/dist/chartist.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;vendor/chartist.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Chartist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;… and generate the module (AMD module syntax):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// vendor/chartist.js&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* globals define, chartist */&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generateModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;generateModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;chartist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chartist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it. You can now test in the add-on’s dummy app if the module import actually works. The absolute minimum you could do is to make a little unit test:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tests/unit/chartist-module-test.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;qunit&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;chartist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;chartist as an ES6 module&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;it works&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’re now ready to publish your add-on and use it in any Ember application. For more test examples please visit the &lt;a href=&quot;https://github.com/matixmatix/ember-chartist-shim&quot;&gt;ember-chartist-shim&lt;/a&gt; GitHub repo.&lt;/p&gt;

&lt;p&gt;If you want to read more on this topic, read this &lt;a href=&quot;http://discuss.emberjs.com/t/best-practices-shimming-libraries-which-use-global-variables/7922&quot;&gt;shimming best practices&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;P.S. Are you fresh in Ember land? I wrote a great book for you: &lt;a href=&quot;http://emberjs-book.com/&quot;&gt;Front-end revolution with Ember.js&lt;/a&gt;. Check it out!&lt;/p&gt;</content><category term="posts" /><summary>Consuming 3rd party libraries from the browser’s global window scope is nowadays considered as outrageous, egregious, preposterous.</summary></entry><entry><title>Metadata via HTTP headers in Ember.js</title><link href="/posts/metadata-via-response-headers-in-emberjs/" rel="alternate" type="text/html" title="Metadata via HTTP headers in Ember.js" /><published>2015-07-07T00:00:00+02:00</published><updated>2015-07-07T00:00:00+02:00</updated><id>/posts/metadata-via-response-headers-in-emberjs</id><content type="html" xml:base="/posts/metadata-via-response-headers-in-emberjs/">&lt;p&gt;In your ambitious web app, there’s a very high probability you’ll want to pass some metadata from your store along with the actual data, e.g. total count of all records when using pagination, various descriptions and whatnot.&lt;/p&gt;

&lt;p&gt;By default, Ember Data’s JSON deserializer looks for a meta key in received response. But wait! What if your API delivers juicy metadata via HTTP response headers? We need to extend the adapter for specific record type, override handleResponse, intercept stuff we need from headers and manually declare them as metadata with the meta key. Simple stuff. Say we’re loading some bonsais:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app/adapters/bonsai.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RESTAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;handleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;X-Total-Count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;X-Page-Count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adapter then automatically picks up things we’ve set as meta. This allows us to access the metadata like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{bonsais.meta.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;this.get(&#39;bonsais.meta.total&#39;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;everywhere&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Happy computering!&lt;/p&gt;</content><category term="posts" /><summary>In your ambitious web app, there’s a very high probability you’ll want to pass some metadata from your store along with the actual data, e.g. total count of all records when using pagination, various descriptions and whatnot.</summary></entry><entry><title>Transforming JSON payload to include object root with RESTSerializer in Ember.js</title><link href="/posts/transforming-json-payload-to-include-object-root-with-restadapter-in-emberjs/" rel="alternate" type="text/html" title="Transforming JSON payload to include object root with RESTSerializer in Ember.js" /><published>2015-07-05T00:00:00+02:00</published><updated>2015-07-05T00:00:00+02:00</updated><id>/posts/transforming-json-payload-to-include-object-root-with-restadapter-in-emberjs</id><content type="html" xml:base="/posts/transforming-json-payload-to-include-object-root-with-restadapter-in-emberjs/">&lt;p&gt;If you find yourself using Ember Data combined with a backend that doesn’t conform to JSON API specs, you just might be in a bit of a trouble. As always, Ember comes with a few assumptions.&lt;/p&gt;

&lt;p&gt;In this case, about how your JSON responses from the HTTP server should look like. Sometimes you don’t have the luxury to be able to change the format of how your backend is responding or already have API consumers depending on current response format, meaning you have to deal with this on the client side.&lt;/p&gt;

&lt;p&gt;In my case the issue was the server endpoints were returning simple arrays with objects, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
    &quot;id&quot;: 1,
    &quot;name&quot;: “Kobosil&quot;
  },
  {
    &quot;id&quot;: 2,
    &quot;name&quot;: “Efdemin&quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most commonly used adapter in Ember.js to communicate with HTTP server by transmitting JSON is RESTAdapter. This adapter expects the JSON payload should be an object that contains an object root type element. While we could roll out our very own customized adapter to support this case, let us rather just patch (extend) RESTSerializer a bit and keep it’s handy functionalities.&lt;/p&gt;

&lt;p&gt;So in order for our Ember application to properly serialize this response, the response should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;artists&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Kobosil&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
      },
      {
        &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;: 2,
        &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;: “Efdemin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we decided we don’t want to touch the way our server responds, let’s modify the response object to add the type root element right before Ember Data internals start serializing things into Ember objects:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//app/serializers/application.js:&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ember-data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RESTSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extractSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extractSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primaryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recordId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;typeKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primaryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;object&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primaryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recordId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extractArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extractArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primaryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pluralTypeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;pluralTypeKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Inflector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inflector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pluralize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primaryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pluralTypeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pluralTypeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;object&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pluralTypeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primaryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With this code, we’ve robustly extended RESTSerializer to be able to add root objects to responses when they’re missing.&lt;/p&gt;</content><category term="posts" /><summary>If you find yourself using Ember Data combined with a backend that doesn’t conform to JSON API specs, you just might be in a bit of a trouble. As always, Ember comes with a few assumptions.</summary></entry><entry><title>Continuous integration for Ember.js apps with Codeship and Divshot</title><link href="/posts/continuous-integration-for-emberjs-apps-with-codeship-and-divshot/" rel="alternate" type="text/html" title="Continuous integration for Ember.js apps with Codeship and Divshot" /><published>2015-06-06T00:00:00+02:00</published><updated>2015-06-06T00:00:00+02:00</updated><id>/posts/continuous-integration-for-emberjs-apps-with-codeship-and-divshot</id><content type="html" xml:base="/posts/continuous-integration-for-emberjs-apps-with-codeship-and-divshot/">&lt;p&gt;[DEPRECATED] I guess pretty much everyone agrees there is no better thing in life than to see your app get deployed automatically after you push some code to your repository.&lt;/p&gt;

&lt;p&gt;Since Ember build is a fully static web assets bundle, it’s possible to serve it via a CDN so you can take some load off your app servers. While the pros and cons of serving your JavaScript app either via CDN or your server are heavily debatable, let’s spare this essay for another time.&lt;/p&gt;

&lt;p&gt;For my continuous delivery system I chose &lt;a href=&quot;http://codeship.com&quot;&gt;Codeship&lt;/a&gt;, and &lt;a href=&quot;http://divshot.com&quot;&gt;Divshot&lt;/a&gt; for CDN. Once you set up your account on both platforms (repository push hook on Codeship, Divshot token), all it’s left to do is to write a simple custom deploy script on Codeship - this case demonstrates deploy to staging environment:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g bower
npm install -g divshot-cli
npm i &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bower i
ember build --environment&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;staging
ember &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; //if you have tests
divshot push staging --token &lt;span class=&quot;nv&quot;&gt;$DIVSHOT_TOKEN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Same script could most probably also be used in other popular continuous integration platforms, such as CircleCI and others.&lt;/p&gt;</content><category term="posts" /><summary>[DEPRECATED] I guess pretty much everyone agrees there is no better thing in life than to see your app get deployed automatically after you push some code to your repository.</summary></entry></feed>
